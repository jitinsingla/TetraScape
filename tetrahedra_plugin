# -*- coding: utf-8 -*-
BTP_Clean.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MKAqqVRJVFTcyByRvPREtYlxfm_6e6Kw

'''
#########################################################
Making sphere
#########################################################

'''

def sphere_geometry(ntri):

    va, ta = icosahedron.icosahedron_geometry()
    from numpy import int32
    ta = ta.astype(int32)

    # Subdivide triangles
    while 4*len(ta) <= ntri:
        from ._surface import subdivide_triangles
        va, ta = subdivide_triangles(va, ta)

  # Put all vertices on sphere.
    from numpy import sqrt
    vn = sqrt((va*va).sum(axis = 1))
  for a in (0,1,2):
    va[:,a] /= vn

  return va, va.copy(), ta


def sphere_model(indices, centers, radii, ntri = 2000):

    from chimerax.graphics import Drawing
    s = Drawing('spheres')
    from chimerax.surface.shapes import sphere_geometry
    for i in indices:
        va, na, ta = sphere_geometry(ntri)
        va = va*radii[i] + centers[i]
        p = s.new_drawing(str(i))
        p.set_geometry(va, na, ta)

    return s
    
s = sphere_model([0,1], [[7,7,7], [9,9,9]], [2,1])

# Creating own model
from chimerax.core.models import Model
m0 = Model('m0', session)
# Add sphere to the model m0
m0.add([s])
@ Add m0 to the session models
session.models.add([m0])


#########################################################
Tetrahedra
#########################################################
#Open 1d0r and select 16th model

import numpy as N
mlist = session.models.list()
m = mlist[1] 
ma = m.atoms
man = ma.names
indices_N = N.where(man == "N")

indices_CA = N.where(man == "CA")

indices_C = N.where(man == "C")

indices_CB = N.where(man == "CB")

coords_N = ma.coords[indices_N]

coords_CA = ma.coords[indices_CA]

coords_C = ma.coords[indices_C]

#coords_CB = ma.coords[indices_CB]
coords_CB = ma.coords[tuple(i+2 for i in indices_C)] #so as to avoid cases in which glycine is the amino acid

fcoords_CA = N.array(4*coords_CA)

coords_H = N.array(fcoords_CA) - N.array(coords_N) - N.array(coords_CB) - N.array(coords_C)


# Making tetrahedra 
def tetrahedra_model(va, na, indices):

    from chimerax.graphics import Drawing
    t = Drawing('tetrahedras')

    for i in indices:
        ta = N.array([[0, 1, 2], [0, 2, 3], [0, 3, 1], [2, 1, 3]])
        p = t.new_drawing(str(i))
        p.set_geometry(va, na, ta)

    return t


# To make Regular tetrahedras for all the amino acids(considering we are chopping first and last)
t={}
for i in range(0, len(coords_N)):

  va = N.array([coords_C[i], coords_CB[i], coords_H[i], coords_N[i]])
  na = va 
  
  t[i] = tetrahedra_model(va, na, [0])

# To add all Regular tetrahedras to gievn model
for i in range(0, len(coords_N)):
    m0.add([t[i]])


# To make Irregular tetrahedras for all the amino acids(considering we are chopping first and last)
t={}
for i in range(1, len(coords_N)-1):

  va = N.array([(coords_C[i]+coords_N[i+1])/2, coords_CB[i], coords_H[i], (coords_C[i-1]+coords_N[i])/2])
  na = va 
  
  t[i] = tetrahedra_model(va, na, [0])


# To add all Irregular tetrahedras to given model
for i in range(1, len(coords_N)-1):
    m0.add([t[i]])

# To add model to current session
session.models.add([m0])